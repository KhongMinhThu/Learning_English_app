let vocabList = [];       // M·∫£ng l∆∞u danh s√°ch t·ª´ ƒë√£ tra => Thay b·∫±ng l∆∞u v√†o localStorage ho·∫∑c g·ª≠i/l·∫•y t·ª´ backend API
let currentAudio = null;  // ƒê·ªëi t∆∞·ª£ng Audio hi·ªán t·∫°i (d√πng ph√°t √¢m)


export function initPopupControls() {
  // N√∫t ƒë√≥ng popup t·ª´ v·ª±ng
  document.getElementById("closePopup").onclick = () => {
    document.getElementById("vocabPopup").style.display = "none";
  };

  // N√∫t ph√°t √¢m trong popup
  document.getElementById("vocabAudioBtn").onclick = () => {
    if (currentAudio) currentAudio.play();
  };
}

export function initVocabControls() {
  // Xo√° t·∫•t c·∫£ t·ª´ ƒë√£ tra
  document.getElementById("clearAllVocab").addEventListener("click", () => {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn xo√° t·∫•t c·∫£?")) {
      vocabList = [];
      renderVocabList();
    }
  });

  // T√¨m ki·∫øm theo t·ª´ kho√°
  document.getElementById("vocabSearch").addEventListener("input", renderVocabList);
}

//H√†m ch√≠nh tra t·ª´ v·ª±ng (tra API t·ª´ ƒëi·ªÉn v√† d·ªãch nghƒ©a)
//=> C√≥ th·ªÉ gi·ªØ nguy√™n ho·∫∑c chuy·ªÉn sang g·ªçi t·ª´ backend proxy ƒë·ªÉ tr√°nh CORS/l·ªói quota
window.lookupWord = function(word, event) {
  const popup = document.getElementById("vocabPopup");
  const rect = event.target.getBoundingClientRect(); // V·ªã tr√≠ t·ª´

  // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã popup (·∫©n m·ªù tr∆∞·ªõc ƒë·ªÉ ch·ªù layout)
  popup.style.opacity = "0";
  popup.style.display = "block";

  // Hi·ªÉn th·ªã popup ngay tr√™n t·ª´ ƒë√£ nh·∫•n
  requestAnimationFrame(() => {
    const popupHeight = popup.offsetHeight;
    const top = rect.top + window.scrollY - popupHeight - 10;
    const left = rect.left + window.scrollX;
    popup.style.top = `${Math.max(top, 10)}px`;
    popup.style.left = `${left}px`;
    popup.style.opacity = "1";
  });

  // G·ªçi API t·ª´ ƒëi·ªÉn
  fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)
    .then(res => res.json())
    .then(data => {
      const entry = data[0];
      const definitionEn = entry.meanings[0].definitions[0].definition;
      const phonetic = entry.phonetics[0]?.text || "Kh√¥ng c√≥";
      const audio = entry.phonetics[0]?.audio;

      // Hi·ªÉn th·ªã n·ªôi dung popup
      document.getElementById("popupWord").innerText = `üìò ${word}`;
      document.getElementById("popupPhonetic").innerText = `Phonetic: ${phonetic}`;
      document.getElementById("popupMeaningEn").innerText = `Meaning (EN): ${definitionEn}`;
      document.getElementById("popupMeaningVi").innerText = "ƒêang d·ªãch...";

      currentAudio = audio ? new Audio(audio) : null;

      // L∆∞u t·ª´ v√†o danh s√°ch
      addToVocabList(word, phonetic, definitionEn, "V√≠ d·ª• s·∫Ω b·ªï sung", audio);

      // G·ªçi th√™m API d·ªãch nghƒ©a ti·∫øng Vi·ªát
      return fetch(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=vi&dt=t&q=${encodeURIComponent(definitionEn)}`);
    })
    .then(res => res.json())
    .then(translateData => {
      const translated = translateData[0][0][0];
      document.getElementById("popupMeaningVi").innerText = `Nghƒ©a (VI): ${translated}`;
    })
    .catch(() => {
      // N·∫øu l·ªói ‚Üí th√¥ng b√°o kh√¥ng t√¨m th·∫•y t·ª´
      document.getElementById("popupWord").innerText = `‚ùå Kh√¥ng t√¨m th·∫•y t·ª´ "${word}"`;
      document.getElementById("popupPhonetic").innerText = "";
      document.getElementById("popupMeaningEn").innerText = "";
      document.getElementById("popupMeaningVi").innerText = "";
    });
};

//Th√™m t·ª´ v√†o danh s√°ch 
//=> Sau khi th√™m, h√£y g·ªçi localStorage.setItem(...) ho·∫∑c POST /api/vocab ƒë·ªÉ l∆∞u vƒ©nh vi·ªÖn
function addToVocabList(word, phonetic, meaning, example, audio) {
  vocabList.push({ word, phonetic, meaning, example, audio });
  renderVocabList();
}

//Hi·ªÉn th·ªã danh s√°ch t·ª´ v·ª±ng ƒë√£ tra
function renderVocabList() {
  const listDiv = document.getElementById("vocab-list");
  const keyword = document.getElementById("vocabSearch").value.toLowerCase();
  listDiv.innerHTML = '';

  // L·ªçc v√† hi·ªÉn th·ªã c√°c t·ª´ kh·ªõp v·ªõi t·ª´ kho√° t√¨m ki·∫øm
  vocabList.filter(item => item.word.toLowerCase().includes(keyword))
    .forEach((item, index) => {
      const div = document.createElement("div");
      div.className = "vocab-item";
      div.innerHTML = `
        <h4>${item.word}</h4>
        <div class="phonetic">${item.phonetic}</div>
        <div><strong>Meaning:</strong> ${item.meaning}</div>
        <div><strong>Example:</strong> ${item.example}</div>
        <button onclick="playVocabAudio(${index})">üîä Ph√°t √¢m</button>
        <button onclick="removeVocab(${index})">‚ùå Xo√°</button>
      `;
      listDiv.appendChild(div);
    });
}

// Ph√°t √¢m l·∫°i t·ª´ ƒë√£ l∆∞u
window.playVocabAudio = function(index) {
  const audioURL = vocabList[index].audio;
  if (audioURL) new Audio(audioURL).play();
};

//Xo√° m·ªôt t·ª´ kh·ªèi danh d√°ch
//N·∫øu d√πng backend, g·ªçi DELETE /api/vocab/:id ho·∫∑c l·ªçc t·ª´ localStorage v√† c·∫≠p nh·∫≠t l·∫°i
window.removeVocab = function(index) {
  vocabList.splice(index, 1);
  renderVocabList();
};
